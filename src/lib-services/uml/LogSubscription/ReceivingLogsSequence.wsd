@startuml Logger Subscription Sequence

skinparam Style strictuml
skinparam SequenceMessageAlign center
hide empty description
title Broadcasting log subscription Sequence Diagram

participant task
participant Logger as logger
participant LoggerService as logservice
participant LogSubscriptionService as subservice
participant LogSubscribersInfo as subinfo
participant SSLServiceAPI as api
participant SSLSocket as socket
participant subscriber as sub

alt message logged
    task -> logger : log(log_level, text)
    logger -> logger : report(log_level, text)
    logger -> logservice : send(LogInfo(task_name, log_level), TextLog(text))
else observable variable HiBONRecord logged
    task -> logger : log.env(var_name, var_value)
    logger -> logger : report(var_name, var_value)
    logger -> logservice : send(LogInfo(task_name, log_level), Document(var_value))
end

logservice -> logservice : receiveLogs(log_info, doc)
logservice -> logservice : matchAnyFilter(log_info)

alt if log_info match any filter
    logservice -> subservice : send(log_info, doc)
    subservice -> subinfo : getInterestedSubscribers(log_info)
    subinfo --> subservice : subscribers_id[]
    loop foreach subscriber_id
        subservice -> subservice : create HiBON with LogInfo and Document
        subservice -> api : send(subscriber_id, data : serialized HiBON);
        api -> socket : send(subscriber_id, data)
        socket --> sub : receive(data)
    end
end

@enduml
